Index: luasrc/controller/olsr.lua
===================================================================
--- luasrc/controller/olsr.lua	(Revision 6240)
+++ luasrc/controller/olsr.lua	(Arbeitskopie)
@@ -1,5 +1,7 @@
 module("luci.controller.olsr", package.seeall)
 
+wa = require("luci.tools.webadmin")
+
 function index()
 	if not nixio.fs.access("/etc/config/olsrd") then
 		return
@@ -178,48 +180,148 @@
 -- Internal
 function fetch_txtinfo(otable)
 	require("luci.sys")
+	local uci = require "luci.model.uci".cursor_state()
 	otable = otable or ""
-	local rawdata = luci.sys.httpget("http://127.0.0.1:2006/"..otable)
+ 	local rawdata = luci.sys.httpget("http://127.0.0.1:2006/"..otable)
+ 	local rawdatav6 = luci.sys.httpget("http://[::1]:2006/"..otable)
+	local data = {}
+	local dataindex = 0
+	local name = ""
 
 	if #rawdata == 0 then
-		if nixio.fs.access("/proc/net/ipv6_route", "r") then
-			rawdata = luci.sys.httpget("http://[::1]:2006/"..otable)
-			if #rawdata == 0 then
-				return nil
+	else
+	    local tables = luci.util.split(luci.util.trim(rawdata), "\r?\n\r?\n", nil, true)
+	    for i, tbl in ipairs(tables) do
+		local lines = luci.util.split(tbl, "\r?\n", nil, true)
+		name  = table.remove(lines, 1):sub(8)
+		local keys  = luci.util.split(table.remove(lines, 1), "\t")
+		local split = #keys - 1
+		if not data[name] then
+			data[name] = {}
+		end
+		for j, line in ipairs(lines) do
+			dataindex = ( dataindex + 1 )
+			di = dataindex
+			local fields = luci.util.split(line, "\t", split)
+			data[name][di] = {}
+			for k, key in pairs(keys) do
+				if key == "Remote IP" or key == "Dest. IP" or key == "Gateway IP" then
+					hostname = nixio.getnameinfo(fields[k], "inet")
+					if hostname then
+						data[name][di][key] = fields[k]
+						data[name][di]["Hostname"] = hostname
+					else
+						data[name][di][key] = fields[k]
+					end
+				elseif key == "Local IP" then
+					data[name][di][key] = fields[k]
+					data[name][di]['Local Device'] = fields[k]
+					uci:foreach("network", "interface",
+						function(s)
+							localip = string.gsub(fields[k], '	', '')
+							if s.ipaddr == localip then
+								data[name][di]['Local Device'] = s['.name'] or interface
+							end
+						end)
+				elseif key == "Interface" then
+					data[name][di][key] = fields[k]
+					uci:foreach("network", "interface",
+						function(s)
+							interface = string.gsub(fields[k], '	', '')
+							if s.ifname == interface then
+								data[name][di][key] = s['.name'] or interface
+							end
+						end)
+				else
+				    data[name][di][key] = fields[k]
+			        end
 			end
-		else
-			return nil
+			if data[name][di].Linkcost then
+				data[name][di].LinkQuality,
+				data[name][di].NLQ,
+				data[name][di].ETX =
+				data[name][di].Linkcost:match("([%w.]+)/([%w.]+)[%s]+([%w.]+)")
+			end
 		end
-	end
+	    end
+        end
 
-	local data = {}
-
-	local tables = luci.util.split(luci.util.trim(rawdata), "\r?\n\r?\n", nil, true)
-
-
-	for i, tbl in ipairs(tables) do
+	if #rawdatav6 == 0 then
+	else
+	    local tables = luci.util.split(luci.util.trim(rawdatav6), "\r?\n\r?\n", nil, true)
+	    for i, tbl in ipairs(tables) do
 		local lines = luci.util.split(tbl, "\r?\n", nil, true)
-		local name  = table.remove(lines, 1):sub(8)
+		name  = table.remove(lines, 1):sub(8)
 		local keys  = luci.util.split(table.remove(lines, 1), "\t")
 		local split = #keys - 1
-
-		data[name] = {}
-
+		if not data[name] then
+		  data[name] = {}
+		end
 		for j, line in ipairs(lines) do
+			dataindex = ( dataindex + 1 )
+			di = dataindex
 			local fields = luci.util.split(line, "\t", split)
-			data[name][j] = {}
+			data[name][di] = {}
 			for k, key in pairs(keys) do
-				data[name][j][key] = fields[k]
+				if key == "Remote IP" then
+				    hostname = nixio.getnameinfo(fields[k], "inet6")
+				    if hostname then
+				      data[name][di][key] = hostname
+				    else
+				      data[name][di][key] = "[" .. fields[k] .. "]"
+				    end
+				elseif key == "Dest. IP" then
+				    data[name][di][key] = "[" .. fields[k] .. "]"
+				elseif key == "Last hop IP" then
+				    data[name][di][key] = "[" .. fields[k] .. "]"
+				elseif key == "IP address" then
+				    data[name][di][key] = "[" .. fields[k] .. "]"
+				elseif key == "Gateway" then
+				    data[name][di][key] = "[" .. fields[k] .. "]"
+				else
+				    data[name][di][key] = fields[k]
+			        end
 			end
-
-			if data[name][j].Linkcost then
-				data[name][j].LinkQuality,
-				data[name][j].NLQ,
-				data[name][j].ETX =
-				data[name][j].Linkcost:match("([%w.]+)/([%w.]+)[%s]+([%w.]+)")
+			if data[name][di].Linkcost then
+				data[name][di].LinkQuality,
+				data[name][di].NLQ,
+				data[name][di].ETX =
+				data[name][di].Linkcost:match("([%w.]+)/([%w.]+)[%s]+([%w.]+)")
 			end
 		end
+	    end
+        end
+	if otable == "links" then
+		local route = {}
+		local uci = require "luci.model.uci".cursor_state()
+		for i, route in ipairs(luci.sys.net.routes()) do
+			if route.dest:prefix() == 0 then
+				dataindex = ( dataindex + 1 )
+				di = dataindex
+				if not data[name] then
+					data[name] = {}
+				end
+				data[name][di] = {}
+				if route.gateway:string() == "0.0.0.0" then
+					data[name][di]['Remote IP'] = uci:get("network", wa.iface_get_network(route.device), "gateway") or route.gateway:string()
+					-- hostname = nixio.getnameinfo(uci:get("network", wa.iface_get_network(route.device), "gateway"), "inet")
+					data[name][di]['Hostname'] = nixio.getnameinfo(uci:get("network", wa.iface_get_network(route.device), "gateway"), "inet") or route.gateway:string()
+					data[name][di]['Local IP'] = uci:get("network", wa.iface_get_network(route.device), "ipaddr") or route.device
+					data[name][di]['Local Device'] = wa.iface_get_network(route.device)
+				else
+					data[name][di]['Remote IP'] = route.gateway:string()
+					data[name][di]['Hostname'] =  nixio.getnameinfo(route.gateway:string(), "inet")
+					data[name][di]['Local IP'] = uci:get("network", wa.iface_get_network(route.device), "ipaddr")
+					data[name][di]['Local Device'] = wa.iface_get_network(route.device)
+				end
+				data[name][di]['Cost'] = '0.001'
+				data[name][di]['LQ'] = '1.000'
+				data[name][di]['NLQ'] = '1.000'
+				data[name][di]['Hyst.'] = '1.000'
+			end
+		end
 	end
-
-	return data
+	if data then
+	    return data
+	end
 end
Index: luasrc/view/status-olsr/routes.htm
===================================================================
--- luasrc/view/status-olsr/routes.htm	(Revision 6240)
+++ luasrc/view/status-olsr/routes.htm	(Arbeitskopie)
@@ -20,6 +20,7 @@
 <tr>
 <th><%:olsrd_network%></th>
 <th><%:olsrd_gateway%></th>
+<th>Hostname gateway</th>
 <th><%:interface%></th>
 <th><%:metric%></th>
 <th>ETX</th>
@@ -41,6 +42,7 @@
 <tr>
 <td><%=route.Destination%></td>
 <td><%=route["Gateway IP"]%></td>
+<td><%=route["Hostname"]%></td>
 <td><%=route.Interface%></td>
 <td><%=route.Metric%></td>
 <td style="background-color:<%=color%>"><%=string.format("%.3f", tonumber(route.ETX) or 0)%></td>
Index: luasrc/view/status-olsr/index.htm
===================================================================
--- luasrc/view/status-olsr/index.htm	(Revision 6240)
+++ luasrc/view/status-olsr/index.htm	(Arbeitskopie)
@@ -19,7 +19,9 @@
 <table class="smalltext" cellspacing="0" cellpadding="6">
 <tr>
 <th><%:olsrd_neighbour_ip%></th>
+<th>Hostname</th>
 <th><%:olsrd_local_ip%></th>
+<th>Device</th>
 <th>LQ</th>
 <th>NLQ</th>
 <th>ETX</th>
@@ -30,6 +32,8 @@
 	link.Cost = tonumber(link.Cost) or 0
 	if link.Cost == 0 then
 		color = "#bb3333"
+	elseif link.Cost == 0.001 then
+		color = "#00C4FF"
 	elseif link.Cost < 4 then
 		color = "#00cc00"
 	elseif link.Cost < 10 then
@@ -40,7 +44,9 @@
 %>
 <tr>
 <td><a href="http://<%=link["Remote IP"]%>/cgi-bin-nodes.html"><%=link["Remote IP"]%></a></td>
+<td><a href="http://<%=link["Hostname"]%>/cgi-bin-nodes.html"><%=link["Hostname"]%></a></td>
 <td><%=link["Local IP"]%></td>
+<td><%=link["Local Device"]%></td>
 <td><%=link.LQ%></td>
 <td><%=link.NLQ%></td>
 <td style="background-color:<%=color%>"><%=string.format("%.3f", link.Cost)%></td>
