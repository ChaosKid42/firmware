Index: modules/admin-mini/luasrc/controller/mini/system.lua
===================================================================
--- a/modules/admin-mini/luasrc/controller/mini/system.lua	(Revision 6686)
+++ b/modules/admin-mini/luasrc/controller/mini/system.lua	(Arbeitskopie)
@@ -28,11 +28,14 @@
 end
 
 function action_backup()
+	local sys = require "luci.sys"
+	local fs  = require "luci.fs"
+
 	local reset_avail = os.execute([[grep '"rootfs_data"' /proc/mtd >/dev/null 2>&1]]) == 0
-	local restore_cmd = "gunzip | tar -xC/ >/dev/null 2>&1"
-	local backup_cmd  = "tar -c %s | gzip 2>/dev/null"
-	
-	local restore_fpi 
+	local restore_cmd = "tar -xzC/ >/dev/null 2>&1"
+	local backup_cmd  = "tar -czT %s 2>/dev/null"
+
+	local restore_fpi
 	luci.http.setfilehandler(
 		function(meta, chunk, eof)
 			if not restore_fpi then
@@ -55,11 +58,22 @@
 		luci.template.render("mini/applyreboot")
 		luci.sys.reboot()
 	elseif backup then
-		local reader = ltn12_popen(backup_cmd:format(_keep_pattern()))
-		luci.http.header('Content-Disposition', 'attachment; filename="backup-%s-%s.tar.gz"' % {
-			luci.sys.hostname(), os.date("%Y-%m-%d")})
-		luci.http.prepare_content("application/x-targz")
-		luci.ltn12.pump.all(reader, luci.http.write)
+		local filelist = "/tmp/luci-backup-list.%d" % os.time()
+
+		sys.call(
+			"( find $(sed -ne '/^[[:space:]]*$/d; /^#/d; p' /etc/sysupgrade.conf " ..
+			"/lib/upgrade/keep.d/* 2>/dev/null) -type f 2>/dev/null; " ..
+			"opkg list-changed-conffiles ) | sort -u > %s" % filelist
+		)
+
+		if fs.access(filelist) then
+			local reader = ltn12_popen(backup_cmd:format(filelist))
+			luci.http.header('Content-Disposition', 'attachment; filename="backup-%s-%s.tar.gz"' % {
+				luci.sys.hostname(), os.date("%Y-%m-%d")})
+			luci.http.prepare_content("application/x-targz")
+			luci.ltn12.pump.all(reader, luci.http.write)
+			fs.unlink(filelist)
+		end
 	elseif reset then
 		luci.template.render("mini/applyreboot")
 		luci.util.exec("mtd -r erase rootfs_data")
@@ -68,6 +82,22 @@
 	end
 end
 
+function action_passwd()
+	local p1 = luci.http.formvalue("pwd1")
+	local p2 = luci.http.formvalue("pwd2")
+	local stat = nil
+
+	if p1 or p2 then
+		if p1 == p2 then
+			stat = luci.sys.user.setpasswd("root", p1)
+		else
+			stat = 10
+		end
+	end
+
+	luci.template.render("mini/passwd", {stat=stat})
+end
+
 function action_reboot()
 	local reboot = luci.http.formvalue("reboot")
 	luci.template.render("mini/reboot", {reboot=reboot})
@@ -150,18 +180,17 @@
 		if has_platform and has_image and has_support then
 			-- Mimetype text/plain
 			luci.http.prepare_content("text/plain")
-			luci.http.write("Starting luci-flash...\n")
+			luci.http.write("Starting sysupgrade...\n")
 
+			io.flush()
+
 			-- Now invoke sysupgrade
 			local keepcfg = keep_avail and luci.http.formvalue("keepcfg") == "1"
-			local flash = ltn12_popen("/sbin/luci-flash %s %q" %{
-				keepcfg and "-k %q" % _keep_pattern() or "", tmpfile
+			local flash = ltn12_popen("/sbin/sysupgrade %s %q" %{
+				keepcfg and "" or "-n", tmpfile
 			})
 
 			luci.ltn12.pump.all(flash, luci.http.write)
-
-			-- Make sure the device is rebooted
-			luci.sys.reboot()
 		end
 
 
@@ -177,7 +206,7 @@
 		if has_image then
 			nixio.fs.unlink(tmpfile)
 		end
-			
+				
 		luci.template.render("mini/upgrade", {
 			step=1,
 			bad_image=(has_image and not has_support or false),
@@ -194,28 +223,14 @@
 			flashsize=storage_size(),
 			keepconfig=(keep_avail and luci.http.formvalue("keepcfg") == "1")
 		} )
-	
+		
 	-- Step 3: load iframe which calls the actual flash procedure
 	elseif step == 3 then
 		luci.template.render("mini/upgrade", {
 			step=3,
 			keepconfig=(keep_avail and luci.http.formvalue("keepcfg") == "1")
 		} )
-	end	
-end
-
-function _keep_pattern()
-	local kpattern = ""
-	local files = luci.model.uci.cursor():get_all("luci", "flash_keep")
-	if files then
-		kpattern = ""
-		for k, v in pairs(files) do
-			if k:sub(1,1) ~= "." and nixio.fs.glob(v)() then
-				kpattern = kpattern .. " " ..  v
-			end
-		end
 	end
-	return kpattern
 end
 
 function ltn12_popen(command)
