diff --git a/package/openvpn-easy-rsa/Makefile b/package/openvpn-easy-rsa/Makefile
new file mode 100644
index 0000000..8847d9b
--- /dev/null
+++ b/package/openvpn-easy-rsa/Makefile
@@ -0,0 +1,60 @@
+#
+# Copyright (C) 2010-2012 OpenWrt.org
+#
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+#
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=openvpn-easy-rsa
+
+PKG_REV:=ff5bfd1dd8e548cb24d302742af3894f893ef92f
+PKG_VERSION:=2013-01-30
+PKG_RELEASE=1
+
+PKG_SOURCE_PROTO:=git
+PKG_SOURCE_URL:=https://github.com/OpenVPN/easy-rsa.git
+PKG_SOURCE_VERSION:=$(PKG_REV)
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION)-$(PKG_REV).tar.gz
+PKG_SOURCE_SUBDIR:=$(PKG_NAME)-$(PKG_VERSION)
+
+PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-$(BUILD_VARIANT)/$(PKG_SOURCE_SUBDIR)
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/openvpn-easy-rsa
+  TITLE:=Simple shell scripts to manage a Certificate Authority
+  SECTION:=net
+  CATEGORY:=Network
+  URL:=http://openvpn.net
+  SUBMENU:=VPN
+  DEPENDS:=+openssl-util
+endef
+
+define Package/openvpn-easy-rsa/conffiles
+/etc/easy-rsa/keys/serial
+/etc/easy-rsa/keys/index.txt
+/etc/easy-rsa/vars
+endef
+
+define Build/Configure
+
+endef
+
+define Build/Compile
+
+endef
+
+define Package/openvpn-easy-rsa/install
+	$(INSTALL_DIR) $(1)/usr/sbin
+	$(CP) $(PKG_BUILD_DIR)/easy-rsa/2.0/{build-*,clean-all,inherit-inter,list-crl,pkitool,revoke-full,sign-req,whichopensslcnf} $(1)/usr/sbin/
+	$(INSTALL_DIR) $(1)/etc/easy-rsa
+	$(INSTALL_DATA) $(PKG_BUILD_DIR)/easy-rsa/2.0/openssl-1.0.0.cnf $(1)/etc/easy-rsa/openssl-1.0.0.cnf
+	$(INSTALL_DATA) $(PKG_BUILD_DIR)/easy-rsa/2.0/vars $(1)/etc/easy-rsa/vars
+	$(INSTALL_DIR) $(1)/etc/easy-rsa/keys
+	$(INSTALL_DATA) files/easy-rsa.index $(1)/etc/easy-rsa/keys/index.txt
+	$(INSTALL_DATA) files/easy-rsa.serial $(1)/etc/easy-rsa/keys/serial
+endef
+
+$(eval $(call BuildPackage,openvpn-easy-rsa))
diff --git a/package/openvpn-easy-rsa/files/easy-rsa.index b/package/openvpn-easy-rsa/files/easy-rsa.index
new file mode 100644
index 0000000..e69de29
diff --git a/package/openvpn-easy-rsa/files/easy-rsa.serial b/package/openvpn-easy-rsa/files/easy-rsa.serial
new file mode 100644
index 0000000..8a0f05e
--- /dev/null
+++ b/package/openvpn-easy-rsa/files/easy-rsa.serial
@@ -0,0 +1 @@
+01
diff --git a/package/openvpn/Config-nossl.in b/package/openvpn/Config-nossl.in
new file mode 100644
index 0000000..98cba25
--- /dev/null
+++ b/package/openvpn/Config-nossl.in
@@ -0,0 +1,47 @@
+if PACKAGE_openvpn-nossl
+
+config OPENVPN_nossl_ENABLE_LZO
+	bool "Enable LZO compression support"
+	default y
+
+config OPENVPN_nossl_ENABLE_SERVER
+	bool "Enable server support (otherwise only client mode is support)"
+	default y
+
+config OPENVPN_nossl_ENABLE_MANAGEMENT
+	bool "Enable management server support"
+	default n
+
+config OPENVPN_nossl_ENABLE_HTTP
+	bool "Enable HTTP proxy support"
+	default y
+
+config OPENVPN_nossl_ENABLE_SOCKS
+	bool "Enable SOCKS proxy support"
+	default y
+
+config OPENVPN_nossl_ENABLE_FRAGMENT
+	bool "Enable internal fragmentation support (--fragment)"
+	default y
+
+config OPENVPN_nossl_ENABLE_MULTIHOME
+	bool "Enable multi-homed UDP server support (--multihome)"
+	default y
+
+config OPENVPN_nossl_ENABLE_PORT_SHARE
+	bool "Enable TCP server port-share support (--port-share)"
+	default y
+
+config OPENVPN_nossl_ENABLE_DEF_AUTH
+	bool "Enable deferred authentication"
+	default y
+
+config OPENVPN_nossl_ENABLE_PF
+	bool "Enable internal packet filter"
+	default y
+
+config OPENVPN_nossl_ENABLE_IPROUTE2
+	bool "Enable support for iproute2"
+	default n
+
+endif
diff --git a/package/openvpn/Config-openssl.in b/package/openvpn/Config-openssl.in
new file mode 100644
index 0000000..6686121
--- /dev/null
+++ b/package/openvpn/Config-openssl.in
@@ -0,0 +1,59 @@
+if PACKAGE_openvpn-openssl
+
+config OPENVPN_openssl_ENABLE_LZO
+	bool "Enable LZO compression support"
+	default y
+
+config OPENVPN_openssl_ENABLE_X509_ALT_USERNAME
+	bool "Enable the --x509-username-field feature"
+	default n
+
+config OPENVPN_openssl_ENABLE_SERVER
+	bool "Enable server support (otherwise only client mode is support)"
+	default y
+
+#config OPENVPN_openssl_ENABLE_EUREPHIA
+#	bool "Enable support for the eurephia plug-in"
+#	default n
+
+config OPENVPN_openssl_ENABLE_MANAGEMENT
+	bool "Enable management server support"
+	default n
+
+#config OPENVPN_openssl_ENABLE_PKCS11
+#	bool "Enable pkcs11 support"
+#	default n
+
+config OPENVPN_openssl_ENABLE_HTTP
+	bool "Enable HTTP proxy support"
+	default y
+
+config OPENVPN_openssl_ENABLE_SOCKS
+	bool "Enable SOCKS proxy support"
+	default y
+
+config OPENVPN_openssl_ENABLE_FRAGMENT
+	bool "Enable internal fragmentation support (--fragment)"
+	default y
+
+config OPENVPN_openssl_ENABLE_MULTIHOME
+	bool "Enable multi-homed UDP server support (--multihome)"
+	default y
+
+config OPENVPN_openssl_ENABLE_PORT_SHARE
+	bool "Enable TCP server port-share support (--port-share)"
+	default y
+
+config OPENVPN_openssl_ENABLE_DEF_AUTH
+	bool "Enable deferred authentication"
+	default y
+
+config OPENVPN_openssl_ENABLE_PF
+	bool "Enable internal packet filter"
+	default y
+
+config OPENVPN_openssl_ENABLE_IPROUTE2
+	bool "Enable support for iproute2"
+	default n
+
+endif
diff --git a/package/openvpn/Config-polarssl.in b/package/openvpn/Config-polarssl.in
new file mode 100644
index 0000000..64c4497
--- /dev/null
+++ b/package/openvpn/Config-polarssl.in
@@ -0,0 +1,59 @@
+if PACKAGE_openvpn-polarssl
+
+config OPENVPN_polarssl_ENABLE_LZO
+	bool "Enable LZO compression support"
+	default y
+
+config OPENVPN_polarssl_ENABLE_X509_ALT_USERNAME
+	bool "Enable the --x509-username-field feature"
+	default n
+
+config OPENVPN_polarssl_ENABLE_SERVER
+	bool "Enable server support (otherwise only client mode is support)"
+	default y
+
+#config OPENVPN_polarssl_ENABLE_EUREPHIA
+#	bool "Enable support for the eurephia plug-in"
+#	default n
+
+config OPENVPN_polarssl_ENABLE_MANAGEMENT
+	bool "Enable management server support"
+	default n
+
+#config OPENVPN_polarssl_ENABLE_PKCS11
+#	bool "Enable pkcs11 support"
+#	default n
+
+config OPENVPN_polarssl_ENABLE_HTTP
+	bool "Enable HTTP proxy support"
+	default y
+
+config OPENVPN_polarssl_ENABLE_SOCKS
+	bool "Enable SOCKS proxy support"
+	default y
+
+config OPENVPN_polarssl_ENABLE_FRAGMENT
+	bool "Enable internal fragmentation support (--fragment)"
+	default y
+
+config OPENVPN_polarssl_ENABLE_MULTIHOME
+	bool "Enable multi-homed UDP server support (--multihome)"
+	default y
+
+config OPENVPN_polarssl_ENABLE_PORT_SHARE
+	bool "Enable TCP server port-share support (--port-share)"
+	default y
+
+config OPENVPN_polarssl_ENABLE_DEF_AUTH
+	bool "Enable deferred authentication"
+	default y
+
+config OPENVPN_polarssl_ENABLE_PF
+	bool "Enable internal packet filter"
+	default y
+
+config OPENVPN_polarssl_ENABLE_IPROUTE2
+	bool "Enable support for iproute2"
+	default n
+
+endif
diff --git a/package/openvpn/Makefile b/package/openvpn/Makefile
new file mode 100644
index 0000000..8e1ccae
--- /dev/null
+++ b/package/openvpn/Makefile
@@ -0,0 +1,123 @@
+#
+# Copyright (C) 2010-2012 OpenWrt.org
+#
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+#
+
+include $(TOPDIR)/rules.mk
+
+PKG_NAME:=openvpn
+
+PKG_VERSION:=2.3.0
+PKG_RELEASE=1
+
+PKG_SOURCE_URL:=http://swupdate.openvpn.net/community/releases
+PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+
+PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-$(BUILD_VARIANT)/$(PKG_NAME)-$(PKG_VERSION)
+
+PKG_INSTALL:=1
+PKG_FIXUP:=autoreconf
+PKG_BUILD_PARALLEL:=1
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/openvpn/Default
+  TITLE:=Open source VPN solution using $(2)
+  SECTION:=net
+  CATEGORY:=Network
+  URL:=http://openvpn.net
+  SUBMENU:=VPN
+  MENU:=1
+  DEPENDS:=+kmod-tun +OPENVPN_$(1)_ENABLE_LZO:liblzo +OPENVPN_$(1)_ENABLE_IPROUTE2:ip $(3)
+  VARIANT:=$(1)
+  MAINTAINER:=Mirko Vogt <mirko@openwrt.org>
+endef
+
+Package/openvpn-openssl=$(call Package/openvpn/Default,openssl,OpenSSL,+libopenssl)
+Package/openvpn-polarssl=$(call Package/openvpn/Default,polarssl,PolarSSL,+libpolarssl)
+Package/openvpn-nossl=$(call Package/openvpn/Default,nossl,plaintext (no SSL))
+
+define Package/openvpn/config/Default
+	source "$(SOURCE)/Config-$(1).in"
+endef
+
+Package/openvpn-openssl/config=$(call Package/openvpn/config/Default,openssl)
+Package/openvpn-polarssl/config=$(call Package/openvpn/config/Default,polarssl)
+Package/openvpn-nossl/config=$(call Package/openvpn/config/Default,nossl)
+
+ifeq ($(BUILD_VARIANT),polarssl)
+CONFIG_OPENVPN_POLARSSL:=y
+endif
+ifeq ($(BUILD_VARIANT),openssl)
+CONFIG_OPENVPN_OPENSSL:=y
+endif
+ifeq ($(BUILD_VARIANT),nossl)
+CONFIG_OPENVPN_NOSSL:=y
+endif
+
+CONFIGURE_VARS += \
+	IFCONFIG=/sbin/ifconfig \
+	ROUTE=/sbin/route \
+	IPROUTE=/usr/sbin/ip \
+	NETSTAT=/sbin/netstat
+
+define Build/Configure
+	$(call Build/Configure/Default, \
+		--enable-small \
+		--disable-selinux \
+		--disable-systemd \
+		--disable-plugins \
+		--disable-debug \
+		--disable-eurephia \
+		--disable-pkcs11 \
+		--enable-password-save \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_LZO),--enable,--disable)-lzo \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_X509_ALT_USERNAME),enable,disable-x509-alt-username)-ssl \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_SERVER),--enable,--disable)-server \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_MANAGEMENT),--enable,--disable)-management \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_SOCKS),--enable,--disable)-socks \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_HTTP),--enable,--disable)-http \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_FRAGMENT),--enable,--disable)-fragment \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_MULTIHOME),--enable,--disable)-multihome \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_IPROUTE2),--enable,--disable)-iproute2 \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_DEF_AUTH),--enable,--disable)-def-auth \
+		$(if $(CONFIG_OPENVPN_$(BUILD_VARIANT)_ENABLE_PF),--enable,--disable)-pf \
+		$(if $(CONFIG_OPENVPN_NOSSL),--disable-ssl --disable-crypto,--enable-ssl --enable-crypto) \
+		$(if $(CONFIG_OPENVPN_OPENSSL),--with-crypto-library=openssl) \
+		$(if $(CONFIG_OPENVPN_POLARSSL),--with-crypto-library=polarssl) \
+	)
+endef
+
+define Package/openvpn-$(BUILD_VARIANT)/conffiles
+/etc/config/openvpn
+endef
+
+define Package/openvpn-$(BUILD_VARIANT)/install
+	$(INSTALL_DIR) \
+		$(1)/usr/sbin \
+		$(1)/etc/init.d \
+		$(1)/etc/config \
+		$(1)/etc/openvpn \
+		$(1)/lib/upgrade/keep.d
+
+	$(INSTALL_BIN) \
+		$(PKG_INSTALL_DIR)/usr/sbin/openvpn \
+		$(1)/usr/sbin/
+
+	$(INSTALL_BIN) \
+		files/openvpn.init \
+		$(1)/etc/init.d/openvpn
+
+	$(INSTALL_CONF) files/openvpn.config \
+		$(1)/etc/config/openvpn
+
+	$(INSTALL_DATA) \
+		files/openvpn.upgrade \
+		$(1)/lib/upgrade/keep.d/openvpn
+endef
+
+$(eval $(call BuildPackage,openvpn-openssl))
+$(eval $(call BuildPackage,openvpn-polarssl))
+$(eval $(call BuildPackage,openvpn-nossl))
diff --git a/package/openvpn/files/openvpn.config b/package/openvpn/files/openvpn.config
new file mode 100644
index 0000000..4a1f667
--- /dev/null
+++ b/package/openvpn/files/openvpn.config
@@ -0,0 +1,398 @@
+package openvpn
+
+#################################################
+# Sample to include a custom config file.       #
+#################################################
+
+config openvpn custom_config
+
+	# Set to 1 to enable this instance:
+	option enabled 0
+
+	# Include OpenVPN configuration
+	option config /etc/openvpn/my-vpn.conf
+
+
+#################################################
+# Sample OpenVPN 2.0 uci config for             #
+# multi-client server.                          #
+#################################################
+
+config openvpn sample_server
+
+	# Set to 1 to enable this instance:
+	option enabled 0
+
+	# Which local IP address should OpenVPN
+	# listen on? (optional)
+#	option local 0.0.0.0
+
+	# Which TCP/UDP port should OpenVPN listen on?
+	# If you want to run multiple OpenVPN instances
+	# on the same machine, use a different port
+	# number for each one.  You will need to
+	# open up this port on your firewall.
+	option port 1194
+
+	# TCP or UDP server?
+#	option proto tcp
+	option proto udp
+
+	# "dev tun" will create a routed IP tunnel,
+	# "dev tap" will create an ethernet tunnel.
+	# Use "dev tap0" if you are ethernet bridging
+	# and have precreated a tap0 virtual interface
+	# and bridged it with your ethernet interface.
+	# If you want to control access policies
+	# over the VPN, you must create firewall
+	# rules for the the TUN/TAP interface.
+	# On non-Windows systems, you can give
+	# an explicit unit number, such as tun0.
+	# On Windows, use "dev-node" for this.
+	# On most systems, the VPN will not function
+	# unless you partially or fully disable
+	# the firewall for the TUN/TAP interface.
+#	option dev tap
+	option dev tun
+
+	# SSL/TLS root certificate (ca), certificate
+	# (cert), and private key (key).  Each client
+	# and the server must have their own cert and
+	# key file.  The server and all clients will
+	# use the same ca file.
+	#
+	# See the "easy-rsa" directory for a series
+	# of scripts for generating RSA certificates
+	# and private keys.  Remember to use
+	# a unique Common Name for the server
+	# and each of the client certificates.
+	#
+	# Any X509 key management system can be used.
+	# OpenVPN can also use a PKCS #12 formatted key file
+	# (see "pkcs12" directive in man page).
+	option ca /etc/openvpn/ca.crt
+	option cert /etc/openvpn/server.crt
+	# This file should be kept secret:
+	option key /etc/openvpn/server.key
+
+	# Diffie hellman parameters.
+	# Generate your own with:
+	#   openssl dhparam -out dh1024.pem 1024
+	# Substitute 2048 for 1024 if you are using
+	# 2048 bit keys.
+	option dh /etc/openvpn/dh1024.pem
+
+	# Configure server mode and supply a VPN subnet
+	# for OpenVPN to draw client addresses from.
+	# The server will take 10.8.0.1 for itself,
+	# the rest will be made available to clients.
+	# Each client will be able to reach the server
+	# on 10.8.0.1. Comment this line out if you are
+	# ethernet bridging. See the man page for more info.
+	option server "10.8.0.0 255.255.255.0"
+
+	# Maintain a record of client <-> virtual IP address
+	# associations in this file.  If OpenVPN goes down or
+	# is restarted, reconnecting clients can be assigned
+	# the same virtual IP address from the pool that was
+	# previously assigned.
+	option ifconfig_pool_persist /tmp/ipp.txt
+
+	# Configure server mode for ethernet bridging.
+	# You must first use your OS's bridging capability
+	# to bridge the TAP interface with the ethernet
+	# NIC interface.  Then you must manually set the
+	# IP/netmask on the bridge interface, here we
+	# assume 10.8.0.4/255.255.255.0.  Finally we
+	# must set aside an IP range in this subnet
+	# (start=10.8.0.50 end=10.8.0.100) to allocate
+	# to connecting clients.  Leave this line commented
+	# out unless you are ethernet bridging.
+#	option server_bridge "10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100"
+
+	# Push routes to the client to allow it
+	# to reach other private subnets behind
+	# the server.  Remember that these
+	# private subnets will also need
+	# to know to route the OpenVPN client
+	# address pool (10.8.0.0/255.255.255.0)
+	# back to the OpenVPN server.
+#	list push "route 192.168.10.0 255.255.255.0"
+#	list push "route 192.168.20.0 255.255.255.0"
+
+	# To assign specific IP addresses to specific
+	# clients or if a connecting client has a private
+	# subnet behind it that should also have VPN access,
+	# use the subdirectory "ccd" for client-specific
+	# configuration files (see man page for more info).
+
+	# EXAMPLE: Suppose the client
+	# having the certificate common name "Thelonious"
+	# also has a small subnet behind his connecting
+	# machine, such as 192.168.40.128/255.255.255.248.
+	# First, uncomment out these lines:
+#	option client_config_dir /etc/openvpn/ccd
+#	list route "192.168.40.128 255.255.255.248"
+	# Then create a file ccd/Thelonious with this line:
+	#   iroute 192.168.40.128 255.255.255.248
+	# This will allow Thelonious' private subnet to
+	# access the VPN.  This example will only work
+	# if you are routing, not bridging, i.e. you are
+	# using "dev tun" and "server" directives.
+
+	# EXAMPLE: Suppose you want to give
+	# Thelonious a fixed VPN IP address of 10.9.0.1.
+	# First uncomment out these lines:
+#	option client_config_dir /etc/openvpn/ccd
+#	list route "10.9.0.0 255.255.255.252"
+#	list route "192.168.100.0 255.255.255.0"
+	# Then add this line to ccd/Thelonious:
+	#   ifconfig-push "10.9.0.1 10.9.0.2"
+
+	# Suppose that you want to enable different
+	# firewall access policies for different groups
+	# of clients.  There are two methods:
+	# (1) Run multiple OpenVPN daemons, one for each
+	#     group, and firewall the TUN/TAP interface
+	#     for each group/daemon appropriately.
+	# (2) (Advanced) Create a script to dynamically
+	#     modify the firewall in response to access
+	#     from different clients.  See man
+	#     page for more info on learn-address script.
+#	option learn_address /etc/openvpn/script
+
+	# If enabled, this directive will configure
+	# all clients to redirect their default
+	# network gateway through the VPN, causing
+	# all IP traffic such as web browsing and
+	# and DNS lookups to go through the VPN
+	# (The OpenVPN server machine may need to NAT
+	# the TUN/TAP interface to the internet in
+	# order for this to work properly).
+	# CAVEAT: May break client's network config if
+	# client's local DHCP server packets get routed
+	# through the tunnel.  Solution: make sure
+	# client's local DHCP server is reachable via
+	# a more specific route than the default route
+	# of 0.0.0.0/0.0.0.0.
+#	list push "redirect-gateway"
+
+	# Certain Windows-specific network settings
+	# can be pushed to clients, such as DNS
+	# or WINS server addresses.  CAVEAT:
+	# http://openvpn.net/faq.html#dhcpcaveats
+#	list push "dhcp-option DNS 10.8.0.1"
+#	list push "dhcp-option WINS 10.8.0.1"
+
+	# Uncomment this directive to allow different
+	# clients to be able to "see" each other.
+	# By default, clients will only see the server.
+	# To force clients to only see the server, you
+	# will also need to appropriately firewall the
+	# server's TUN/TAP interface.
+#	option client_to_client 1
+
+	# Uncomment this directive if multiple clients
+	# might connect with the same certificate/key
+	# files or common names.  This is recommended
+	# only for testing purposes.  For production use,
+	# each client should have its own certificate/key
+	# pair.
+	#
+	# IF YOU HAVE NOT GENERATED INDIVIDUAL
+	# CERTIFICATE/KEY PAIRS FOR EACH CLIENT,
+	# EACH HAVING ITS OWN UNIQUE "COMMON NAME",
+	# UNCOMMENT THIS LINE OUT.
+#	option duplicate_cn 1
+
+	# The keepalive directive causes ping-like
+	# messages to be sent back and forth over
+	# the link so that each side knows when
+	# the other side has gone down.
+	# Ping every 10 seconds, assume that remote
+	# peer is down if no ping received during
+	# a 120 second time period.
+	option keepalive "10 120"
+
+	# For extra security beyond that provided
+	# by SSL/TLS, create an "HMAC firewall"
+	# to help block DoS attacks and UDP port flooding.
+	#
+	# Generate with:
+	#   openvpn --genkey --secret ta.key
+	#
+	# The server and each client must have
+	# a copy of this key.
+	# The second parameter should be '0'
+	# on the server and '1' on the clients.
+	# This file is secret:
+#	option tls_auth "/etc/openvpn/ta.key 0"
+
+	# Select a cryptographic cipher.
+	# This config item must be copied to
+	# the client config file as well.
+	# Blowfish (default):
+#	option cipher BF-CBC
+	# AES:
+#	option cipher AES-128-CBC
+	# Triple-DES:
+#	option cipher DES-EDE3-CBC
+
+	# Enable compression on the VPN link.
+	# If you enable it here, you must also
+	# enable it in the client config file.
+	option comp_lzo 1
+
+	# The maximum number of concurrently connected
+	# clients we want to allow.
+#	option max_clients 100
+
+	# The persist options will try to avoid
+	# accessing certain resources on restart
+	# that may no longer be accessible because
+	# of the privilege downgrade.
+	option persist_key 1
+	option persist_tun 1
+
+	# Output a short status file showing
+	# current connections, truncated
+	# and rewritten every minute.
+	option status /tmp/openvpn-status.log
+
+	# By default, log messages will go to the syslog (or
+	# on Windows, if running as a service, they will go to
+	# the "\Program Files\OpenVPN\log" directory).
+	# Use log or log-append to override this default.
+	# "log" will truncate the log file on OpenVPN startup,
+	# while "log-append" will append to it.  Use one
+	# or the other (but not both).
+#	option log         /tmp/openvpn.log
+#	option log_append  /tmp/openvpn.log
+
+	# Set the appropriate level of log
+	# file verbosity.
+	#
+	# 0 is silent, except for fatal errors
+	# 4 is reasonable for general usage
+	# 5 and 6 can help to debug connection problems
+	# 9 is extremely verbose
+	option verb 3
+
+	# Silence repeating messages.  At most 20
+	# sequential messages of the same message
+	# category will be output to the log.
+#	option mute 20
+
+
+##############################################
+# Sample client-side OpenVPN 2.0 uci config  #
+# for connecting to multi-client server.     #
+##############################################
+
+config openvpn sample_client
+
+	# Set to 1 to enable this instance:
+	option enabled 0
+
+	# Specify that we are a client and that we
+	# will be pulling certain config file directives
+	# from the server.
+	option client 1
+
+	# Use the same setting as you are using on
+	# the server.
+	# On most systems, the VPN will not function
+	# unless you partially or fully disable
+	# the firewall for the TUN/TAP interface.
+#	option dev tap
+	option dev tun
+
+	# Are we connecting to a TCP or
+	# UDP server?  Use the same setting as
+	# on the server.
+#	option proto tcp
+	option proto udp
+
+	# The hostname/IP and port of the server.
+	# You can have multiple remote entries
+	# to load balance between the servers.
+	list remote "my_server_1 1194"
+#	list remote "my_server_2 1194"
+
+	# Choose a random host from the remote
+	# list for load_balancing.  Otherwise
+	# try hosts in the order specified.
+#	option remote_random 1
+
+	# Keep trying indefinitely to resolve the
+	# host name of the OpenVPN server.  Very useful
+	# on machines which are not permanently connected
+	# to the internet such as laptops.
+	option resolv_retry infinite
+
+	# Most clients don't need to bind to
+	# a specific local port number.
+	option nobind 1
+
+	# Try to preserve some state across restarts.
+	option persist_key 1
+	option persist_tun 1
+
+	# If you are connecting through an
+	# HTTP proxy to reach the actual OpenVPN
+	# server, put the proxy server/IP and
+	# port number here.  See the man page
+	# if your proxy server requires
+	# authentication.
+	# retry on connection failures:
+#	option http_proxy_retry 1
+	# specify http proxy address and port:
+#	option http_proxy "192.168.1.100 8080"
+
+	# Wireless networks often produce a lot
+	# of duplicate packets.  Set this flag
+	# to silence duplicate packet warnings.
+#	option mute_replay_warnings 1
+
+	# SSL/TLS parms.
+	# See the server config file for more
+	# description.  It's best to use
+	# a separate .crt/.key file pair
+	# for each client.  A single ca
+	# file can be used for all clients.
+	option ca /etc/openvpn/ca.crt
+	option cert /etc/openvpn/client.crt
+	option key /etc/openvpn/client.key
+
+	# Verify server certificate by checking
+	# that the certicate has the nsCertType
+	# field set to "server".  This is an
+	# important precaution to protect against
+	# a potential attack discussed here:
+	#  http://openvpn.net/howto.html#mitm
+	#
+	# To use this feature, you will need to generate
+	# your server certificates with the nsCertType
+	# field set to "server".  The build_key_server
+	# script in the easy_rsa folder will do this.
+#	option ns_cert_type server
+
+	# If a tls_auth key is used on the server
+	# then every client must also have the key.
+#	option tls_auth "/etc/openvpn/ta.key 1"
+
+	# Select a cryptographic cipher.
+	# If the cipher option is used on the server
+	# then you must also specify it here.
+#	option cipher x
+
+	# Enable compression on the VPN link.
+	# Don't enable this unless it is also
+	# enabled in the server config file.
+	option comp_lzo 1
+
+	# Set log file verbosity.
+	option verb 3
+
+	# Silence repeating messages
+#	option mute 20
diff --git a/package/openvpn/files/openvpn.init b/package/openvpn/files/openvpn.init
new file mode 100644
index 0000000..c58f005
--- /dev/null
+++ b/package/openvpn/files/openvpn.init
@@ -0,0 +1,154 @@
+#!/bin/sh /etc/rc.common
+# Copyright (C) 2008-2011 OpenWrt.org
+# Copyright (C) 2008 Jo-Philipp Wich
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+
+START=95
+
+SERVICE_DAEMONIZE=1
+SERVICE_WRITE_PID=1
+
+EXTRA_COMMANDS="up down"
+
+LIST_SEP="
+"
+
+append_param() {
+	local v="$1"
+	case "$v" in
+		*_*_*_*) v=${v%%_*}-${v#*_}; v=${v%%_*}-${v#*_}; v=${v%%_*}-${v#*_} ;;
+		*_*_*)   v=${v%%_*}-${v#*_}; v=${v%%_*}-${v#*_} ;;
+		*_*)     v=${v%%_*}-${v#*_} ;;
+	esac
+	ARGS="$ARGS --$v"
+	return 0
+}
+
+append_bools() {
+	local p; local v; local s="$1"; shift
+	for p in $*; do
+		config_get_bool v "$s" "$p"
+		[ "$v" == 1 ] && append_param "$p"
+	done
+}
+
+append_params() {
+	local p; local v; local s="$1"; shift
+	for p in $*; do
+		config_get v "$s" "$p"
+		IFS="$LIST_SEP"
+		for v in $v; do
+			[ -n "$v" ] && append_param "$p" && ARGS="$ARGS $v"
+		done
+		unset IFS
+	done
+}
+
+section_enabled() {
+	config_get_bool enable  "$1" 'enable'  0
+	config_get_bool enabled "$1" 'enabled' 0
+	[ $enable -gt 0 ] || [ $enabled -gt 0 ]
+}
+
+start_instance() {
+	local s="$1"
+
+	section_enabled "$s" || return 1
+
+	ARGS=""
+
+	# append flags
+	append_bools "$s" \
+		auth_nocache auth_retry auth_user_pass_optional bind ccd_exclusive client client_cert_not_required \
+		client_to_client comp_lzo comp_noadapt disable \
+		disable_occ down_pre duplicate_cn fast_io float http_proxy_retry \
+		ifconfig_noexec ifconfig_nowarn ifconfig_pool_linear management_forget_disconnect management_hold \
+		management_query_passwords management_signal mktun mlock mtu_test multihome mute_replay_warnings \
+		nobind no_iv no_name_remapping no_replay opt_verify passtos persist_key persist_local_ip \
+		persist_remote_ip persist_tun ping_timer_rem pull push_reset \
+		remote_random rmtun route_noexec route_nopull single_session socks_proxy_retry \
+		suppress_timestamps tcp_nodelay test_crypto tls_client tls_exit tls_server \
+		tun_ipv6 up_delay up_restart username_as_common_name
+
+	# append params
+	append_params "$s" \
+		cd askpass auth auth_user_pass auth_user_pass_verify bcast_buffers ca cert \
+		chroot cipher client_config_dir client_connect client_disconnect config connect_freq \
+		connect_retry connect_timeout connect_retry_max crl_verify dev dev_node dev_type dh \
+		echo engine explicit_exit_notify fragment group hand_window hash_size \
+		http_proxy http_proxy_option http_proxy_timeout ifconfig ifconfig_pool \
+		ifconfig_pool_persist ifconfig_push inactive ipchange iroute keepalive \
+		key key_method keysize learn_address link_mtu lladdr local log log_append \
+		lport management management_log_cache max_clients \
+		max_routes_per_client mode mssfix mtu_disc mute nice ns_cert_type ping \
+		ping_exit ping_restart pkcs12 plugin port port_share prng proto rcvbuf \
+		redirect_gateway remap_usr1 remote remote_cert_eku remote_cert_ku remote_cert_tls \
+		reneg_bytes reneg_pkts reneg_sec \
+		replay_persist replay_window resolv_retry route route_delay route_gateway \
+		route_metric route_up rport script_security secret server server_bridge setenv shaper sndbuf \
+		socks_proxy status status_version syslog tcp_queue_limit tls_auth \
+		tls_cipher tls_remote tls_timeout tls_verify tmp_dir topology tran_window \
+		tun_mtu tun_mtu_extra txqueuelen user verb down push up
+
+
+	SERVICE_PID_FILE="/var/run/openvpn-$s.pid"
+	service_start /usr/sbin/openvpn --syslog "openvpn($s)" --writepid "$SERVICE_PID_FILE" $ARGS
+}
+
+stop_instance() {
+	local s="$1"
+
+	section_enabled "$s" || return 1
+
+	SERVICE_PID_FILE="/var/run/openvpn-$s.pid"
+	service_stop /usr/sbin/openvpn
+}
+
+reload_instance() {
+	local s="$1"
+
+	section_enabled "$s" || return 1
+
+	SERVICE_PID_FILE="/var/run/openvpn-$s.pid"
+	service_reload /usr/sbin/openvpn
+}
+
+start() {
+	config_load 'openvpn'
+	config_foreach start_instance 'openvpn'
+}
+
+stop() {
+	config_load 'openvpn'
+	config_foreach stop_instance 'openvpn'
+}
+
+reload() {
+	config_load 'openvpn'
+	config_foreach reload_instance 'openvpn'
+}
+
+up() {
+	local exists
+	local instance
+	config_load 'openvpn'
+	for instance in "$@"; do
+		config_get exists "$instance" 'TYPE'
+		if [ "$exists" == "openvpn" ]; then
+			start_instance "$instance"
+		fi
+	done
+}
+
+down() {
+	local exists
+	local instance
+	config_load 'openvpn'
+	for instance in "$@"; do
+		config_get exists "$instance" 'TYPE'
+		if [ "$exists" == "openvpn" ]; then
+			stop_instance "$instance"
+		fi
+	done
+}
diff --git a/package/openvpn/files/openvpn.upgrade b/package/openvpn/files/openvpn.upgrade
new file mode 100644
index 0000000..6ae49d2
--- /dev/null
+++ b/package/openvpn/files/openvpn.upgrade
@@ -0,0 +1 @@
+/etc/openvpn/
diff --git a/package/openvpn/patches/100-polarssl_update.patch b/package/openvpn/patches/100-polarssl_update.patch
new file mode 100644
index 0000000..c5c8faf
--- /dev/null
+++ b/package/openvpn/patches/100-polarssl_update.patch
@@ -0,0 +1,60 @@
+--- a/src/openvpn/crypto_polarssl.h
++++ b/src/openvpn/crypto_polarssl.h
+@@ -60,7 +60,7 @@ typedef md_context_t hmac_ctx_t;
+ #define OPENVPN_MODE_OFB 	POLARSSL_MODE_OFB
+ 
+ /** Cipher is in CFB mode */
+-#define OPENVPN_MODE_CFB 	POLARSSL_MODE_CFB128
++#define OPENVPN_MODE_CFB 	POLARSSL_MODE_CFB
+ 
+ /** Cipher should encrypt */
+ #define OPENVPN_OP_ENCRYPT 	POLARSSL_ENCRYPT
+--- a/src/openvpn/ssl_polarssl.c
++++ b/src/openvpn/ssl_polarssl.c
+@@ -65,23 +65,6 @@ tls_clear_error()
+ {
+ }
+ 
+-static int default_ciphersuites[] =
+-{
+-    SSL_EDH_RSA_AES_256_SHA,
+-    SSL_EDH_RSA_CAMELLIA_256_SHA,
+-    SSL_EDH_RSA_AES_128_SHA,
+-    SSL_EDH_RSA_CAMELLIA_128_SHA,
+-    SSL_EDH_RSA_DES_168_SHA,
+-    SSL_RSA_AES_256_SHA,
+-    SSL_RSA_CAMELLIA_256_SHA,
+-    SSL_RSA_AES_128_SHA,
+-    SSL_RSA_CAMELLIA_128_SHA,
+-    SSL_RSA_DES_168_SHA,
+-    SSL_RSA_RC4_128_SHA,
+-    SSL_RSA_RC4_128_MD5,
+-    0
+-};
+-
+ void
+ tls_ctx_server_new(struct tls_root_ctx *ctx)
+ {
+@@ -515,11 +498,11 @@ void key_state_ssl_init(struct key_state
+       ssl_set_rng (ks_ssl->ctx, ctr_drbg_random, rand_ctx_get());
+ 
+       ALLOC_OBJ_CLEAR (ks_ssl->ssn, ssl_session);
+-      ssl_set_session (ks_ssl->ctx, 0, 0, ks_ssl->ssn );
++      ssl_set_session (ks_ssl->ctx, ks_ssl->ssn );
+       if (ssl_ctx->allowed_ciphers)
+ 	ssl_set_ciphersuites (ks_ssl->ctx, ssl_ctx->allowed_ciphers);
+       else
+-	ssl_set_ciphersuites (ks_ssl->ctx, default_ciphersuites);
++	ssl_set_ciphersuites (ks_ssl->ctx, ssl_default_ciphersuites);
+ 
+       /* Initialise authentication information */
+       if (is_server)
+@@ -828,7 +811,7 @@ print_details (struct key_state_ssl * ks
+ 		    ssl_get_version (ks_ssl->ctx),
+ 		    ssl_get_ciphersuite(ks_ssl->ctx));
+ 
+-  cert = ks_ssl->ctx->peer_cert;
++  cert = ssl_get_peer_cert(ks_ssl->ctx);
+   if (cert != NULL)
+     {
+       openvpn_snprintf (s2, sizeof (s2), ", " counter_format " bit RSA", (counter_type) cert->rsa.len * 8);
