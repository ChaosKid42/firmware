diff -Nru -x .svn package/mac80211/diff.txt package/mac80211/diff.txt
--- package/mac80211/diff.txt	2012-02-28 01:44:48.907896972 +0100
+++ package/mac80211/diff.txt	1970-01-01 01:00:00.000000000 +0100
@@ -1,89 +0,0 @@
---- Makefile	2011-12-22 06:58:51.000000000 +0100
-+++ /Users/nbd/openwrt/package/mac80211/Makefile	2011-12-17 16:40:06.000000000 +0100
-@@ -49,7 +49,7 @@
-   SUBMENU:=$(WMENU)
-   URL:=http://linuxwireless.org/
-   MAINTAINER:=Felix Fietkau <nbd@openwrt.org>
--  DEPENDS:=@(!(TARGET_avr32||TARGET_ep93xx)||BROKEN) @!LINUX_2_4
-+  DEPENDS:=@(!(TARGET_avr32||TARGET_ep93xx||TARGET_ps3||TARGET_pxcab||LINUX_3_2)||BROKEN)
- endef
- 
- define KernelPackage/cfg80211
-@@ -164,7 +164,7 @@
- 
- define KernelPackage/p54-common
-   $(call KernelPackage/p54/Default)
--  DEPENDS+= @PCI_SUPPORT||@USB_SUPPORT||@TARGET_omap24xx +kmod-mac80211 +kmod-crc-ccitt
-+  DEPENDS+= @PCI_SUPPORT||@USB_SUPPORT||@TARGET_omap24xx +kmod-mac80211 +kmod-lib-crc-ccitt
-   TITLE+= (COMMON)
-   FILES:=$(PKG_BUILD_DIR)/drivers/net/wireless/p54/p54common.ko
-   AUTOLOAD:=$(call AutoLoad,30,p54common)
-@@ -207,7 +207,7 @@
- 
- define KernelPackage/rt2x00-lib
- $(call KernelPackage/rt2x00/Default)
--  DEPENDS+= @(PCI_SUPPORT||USB_SUPPORT||TARGET_ramips) +kmod-mac80211 +kmod-crc-itu-t
-+  DEPENDS+= @(PCI_SUPPORT||USB_SUPPORT||TARGET_ramips) +kmod-mac80211 +kmod-lib-crc-itu-t
-   TITLE+= (LIB)
-   FILES:=$(PKG_BUILD_DIR)/drivers/net/wireless/rt2x00/rt2x00lib.ko
-   AUTOLOAD:=$(call AutoLoad,25,rt2x00lib)
-@@ -308,7 +308,7 @@
- 
- define KernelPackage/rt2800-pci
- $(call KernelPackage/rt2x00/Default)
--  DEPENDS+= @(PCI_SUPPORT||TARGET_ramips) +kmod-rt2x00-pci +kmod-rt2800-lib +kmod-crc-ccitt +TARGET_ramips:kmod-rt2x00-soc
-+  DEPENDS+= @(PCI_SUPPORT||TARGET_ramips) +kmod-rt2x00-pci +kmod-rt2800-lib +kmod-lib-crc-ccitt +TARGET_ramips:kmod-rt2x00-soc
-   TITLE+= (RT2860 PCI)
-   FILES:=$(PKG_BUILD_DIR)/drivers/net/wireless/rt2x00/rt2800pci.ko
-   AUTOLOAD:=$(call AutoLoad,28,rt2800pci)
-@@ -316,7 +316,7 @@
- 
- define KernelPackage/rt2800-usb
- $(call KernelPackage/rt2x00/Default)
--  DEPENDS+= @USB_SUPPORT +kmod-rt2x00-usb +kmod-rt2800-lib +kmod-crc-ccitt
-+  DEPENDS+= @USB_SUPPORT +kmod-rt2x00-usb +kmod-rt2800-lib +kmod-lib-crc-ccitt
-   TITLE+= (RT2870 USB)
-   FILES:=$(PKG_BUILD_DIR)/drivers/net/wireless/rt2x00/rt2800usb.ko
-   AUTOLOAD:=$(call AutoLoad,28,rt2800usb)
-@@ -859,6 +859,7 @@
- 
- define KernelPackage/b43
- $(call KernelPackage/b43-common)
-+  DEPENDS+= +@DRIVER_11N_SUPPORT +!TARGET_brcm47xx:kmod-bcma
-   TITLE:=Broadcom 43xx wireless support
-   FILES:=$(PKG_BUILD_DIR)/drivers/net/wireless/b43/b43.ko
-   AUTOLOAD:=$(call AutoLoad,30,b43)
-@@ -938,7 +939,7 @@
- 	config B43_FW_SQUASH_COREREVS
- 		string "Core revisions to include"
- 		depends on B43_FW_SQUASH
--		default "5,6,7,8,9,10,13,14,15"
-+		default "5,6,7,8,9,10,11,13,14,15,16"
- 		help
- 		  This is a comma seperated list of core revision numbers.
- 
-@@ -951,7 +952,7 @@
- 	config B43_FW_SQUASH_PHYTYPES
- 		string "PHY types to include"
- 		depends on B43_FW_SQUASH
--		default "G,LP"
-+		default "G,LP,N"
- 		help
- 		  This is a comma seperated list of PHY types:
- 		    A  => A-PHY
-@@ -977,7 +978,6 @@
- 
- 	config PACKAGE_B43_PIO
- 		bool "Enable support for PIO transfer mode"
--		depends BROKEN
- 		default n
- 		help
- 		  Enable support for using PIO instead of DMA. Unless you have DMA
-@@ -1250,6 +1250,7 @@
- 	$(TAR) -C $(PKG_BUILD_DIR) -xjf $(DL_DIR)/$(ZD1211FW_NAME)-$(ZD1211FW_VERSION).tar.bz2
- 	$(TAR) -C $(PKG_BUILD_DIR) -xjf $(DL_DIR)/$(PKG_LINUX_FIRMWARE_SOURCE)
- 	rm -rf $(PKG_BUILD_DIR)/include/linux/ssb
-+	rm -rf $(PKG_BUILD_DIR)/include/linux/bcma
- 	rm -f $(PKG_BUILD_DIR)/include/net/ieee80211.h
- endef
- 
diff -Nru -x .svn package/mac80211/patches/440-ath5k_calibrate_no_queue_stop.patch package/mac80211/patches/440-ath5k_calibrate_no_queue_stop.patch
--- package/mac80211/patches/440-ath5k_calibrate_no_queue_stop.patch	1970-01-01 01:00:00.000000000 +0100
+++ package/mac80211/patches/440-ath5k_calibrate_no_queue_stop.patch	2012-02-27 23:58:56.632895472 +0100
@@ -0,0 +1,31 @@
+--- a/drivers/net/wireless/ath/ath5k/base.c
++++ b/drivers/net/wireless/ath/ath5k/base.c
+@@ -2330,15 +2330,6 @@ ath5k_calibrate_work(struct work_struct 
+ 					"got new rfgain, resetting\n");
+ 			ieee80211_queue_work(ah->hw, &ah->reset_work);
+ 		}
+-
+-		/* TODO: On full calibration we should stop TX here,
+-		 * so that it doesn't interfere (mostly due to gain_f
+-		 * calibration that messes with tx packets -see phy.c).
+-		 *
+-		 * NOTE: Stopping the queues from above is not enough
+-		 * to stop TX but saves us from disconecting (at least
+-		 * we don't lose packets). */
+-		ieee80211_stop_queues(ah->hw);
+ 	} else
+ 		ah->ah_cal_mask |= AR5K_CALIBRATION_SHORT;
+ 
+@@ -2353,10 +2344,9 @@ ath5k_calibrate_work(struct work_struct 
+ 				ah->curchan->center_freq));
+ 
+ 	/* Clear calibration flags */
+-	if (ah->ah_cal_mask & AR5K_CALIBRATION_FULL) {
+-		ieee80211_wake_queues(ah->hw);
++	if (ah->ah_cal_mask & AR5K_CALIBRATION_FULL)
+ 		ah->ah_cal_mask &= ~AR5K_CALIBRATION_FULL;
+-	} else if (ah->ah_cal_mask & AR5K_CALIBRATION_SHORT)
++	else if (ah->ah_cal_mask & AR5K_CALIBRATION_SHORT)
+ 		ah->ah_cal_mask &= ~AR5K_CALIBRATION_SHORT;
+ }
+ 
diff -Nru -x .svn package/mac80211/patches/441-ath5k_no_agc_recalibration.patch package/mac80211/patches/441-ath5k_no_agc_recalibration.patch
--- package/mac80211/patches/441-ath5k_no_agc_recalibration.patch	1970-01-01 01:00:00.000000000 +0100
+++ package/mac80211/patches/441-ath5k_no_agc_recalibration.patch	2012-02-27 23:58:56.509001583 +0100
@@ -0,0 +1,42 @@
+--- a/drivers/net/wireless/ath/ath5k/phy.c
++++ b/drivers/net/wireless/ath/ath5k/phy.c
+@@ -1871,31 +1871,15 @@ ath5k_hw_phy_calibrate(struct ath5k_hw *
+ 		ret = 0;
+ 	}
+ 
+-	/* On full calibration do an AGC calibration and
+-	 * request a PAPD probe for gainf calibration if
+-	 * needed */
+-	if (ah->ah_cal_mask & AR5K_CALIBRATION_FULL) {
++	/* On full calibration request a PAPD probe for
++	 * gainf calibration if needed */
++	if ((ah->ah_cal_mask & AR5K_CALIBRATION_FULL) &&
++	    (ah->ah_radio == AR5K_RF5111 ||
++	     ah->ah_radio == AR5K_RF5112) &&
++	    channel->hw_value != AR5K_MODE_11B)
++		ath5k_hw_request_rfgain_probe(ah);
+ 
+-		AR5K_REG_ENABLE_BITS(ah, AR5K_PHY_AGCCTL,
+-					AR5K_PHY_AGCCTL_CAL);
+-
+-		ret = ath5k_hw_register_timeout(ah, AR5K_PHY_AGCCTL,
+-			AR5K_PHY_AGCCTL_CAL | AR5K_PHY_AGCCTL_NF,
+-			0, false);
+-		if (ret) {
+-			ATH5K_ERR(ah,
+-				"gain calibration timeout (%uMHz)\n",
+-				channel->center_freq);
+-		}
+-
+-		if ((ah->ah_radio == AR5K_RF5111 ||
+-			ah->ah_radio == AR5K_RF5112)
+-			&& (channel->hw_value != AR5K_MODE_11B))
+-			ath5k_hw_request_rfgain_probe(ah);
+-	}
+-
+-	/* Update noise floor
+-	 * XXX: Only do this after AGC calibration */
++	/* Update noise floor */
+ 	if (!(ah->ah_cal_mask & AR5K_CALIBRATION_NF))
+ 		ath5k_hw_update_noise_floor(ah);
+ 
diff -Nru -x .svn package/mac80211/patches/568-ath9k_fix_wep.patch package/mac80211/patches/568-ath9k_fix_wep.patch
--- package/mac80211/patches/568-ath9k_fix_wep.patch	1970-01-01 01:00:00.000000000 +0100
+++ package/mac80211/patches/568-ath9k_fix_wep.patch	2012-02-27 23:58:56.413149005 +0100
@@ -0,0 +1,17 @@
+--- a/drivers/net/wireless/ath/ath9k/recv.c
++++ b/drivers/net/wireless/ath/ath9k/recv.c
+@@ -823,6 +823,14 @@ static bool ath9k_rx_accept(struct ath_c
+ 		(ATH9K_RXERR_DECRYPT | ATH9K_RXERR_CRC | ATH9K_RXERR_MIC |
+ 		 ATH9K_RXERR_KEYMISS));
+ 
++	/*
++	 * Key miss events are only relevant for pairwise keys where the
++	 * descriptor does contain a valid key index. This has been observed
++	 * mostly with CCMP encryption.
++	 */
++	if (rx_stats->rs_keyix == ATH9K_RXKEYIX_INVALID)
++		rx_stats->rs_status &= ~ATH9K_RXERR_KEYMISS;
++
+ 	if (!rx_stats->rs_datalen)
+ 		return false;
+         /*
diff -Nru -x .svn package/mac80211/patches/569-ath9k_fix_cts.patch package/mac80211/patches/569-ath9k_fix_cts.patch
--- package/mac80211/patches/569-ath9k_fix_cts.patch	1970-01-01 01:00:00.000000000 +0100
+++ package/mac80211/patches/569-ath9k_fix_cts.patch	2012-02-27 23:58:58.010225315 +0100
@@ -0,0 +1,21 @@
+--- a/drivers/net/wireless/ath/ath9k/hw.c
++++ b/drivers/net/wireless/ath/ath9k/hw.c
+@@ -1061,13 +1061,16 @@ void ath9k_hw_init_global_settings(struc
+ 
+ 	/*
+ 	 * Workaround for early ACK timeouts, add an offset to match the
+-	 * initval's 64us ack timeout value.
++	 * initval's 64us ack timeout value. Use 48us for the CTS timeout.
+ 	 * This was initially only meant to work around an issue with delayed
+ 	 * BA frames in some implementations, but it has been found to fix ACK
+ 	 * timeout issues in other cases as well.
+ 	 */
+-	if (conf->channel && conf->channel->band == IEEE80211_BAND_2GHZ)
++	if (conf->channel && conf->channel->band == IEEE80211_BAND_2GHZ) {
+ 		acktimeout += 64 - sifstime - ah->slottime;
++		ctstimeout += 48 - sifstime - ah->slottime;
++	}
++
+ 
+ 	ath9k_hw_set_sifs_time(ah, sifstime);
+ 	ath9k_hw_setslottime(ah, slottime);
diff -Nru -x .svn package/mac80211/patches/571-ath9k_btcoex_optional.patch package/mac80211/patches/571-ath9k_btcoex_optional.patch
--- package/mac80211/patches/571-ath9k_btcoex_optional.patch	2012-02-28 01:44:48.899897770 +0100
+++ package/mac80211/patches/571-ath9k_btcoex_optional.patch	2012-02-27 23:58:56.447903498 +0100
@@ -203,7 +203,7 @@
  	if (btcoex->hw_timer_enabled)
 --- a/drivers/net/wireless/ath/ath9k/hw.c
 +++ b/drivers/net/wireless/ath/ath9k/hw.c
-@@ -1929,7 +1929,8 @@ int ath9k_hw_reset(struct ath_hw *ah, st
+@@ -1932,7 +1932,8 @@ int ath9k_hw_reset(struct ath_hw *ah, st
  #endif
  	}
  
Added: package/mac80211/patches/805-fix_gpio_bcm5354.patch
===================================================================
--- package/mac80211/patches/805-fix_gpio_bcm5354.patch	                        (rev 0)
+++ package/mac80211/patches/805-fix_gpio_bcm5354.patch	2012-02-28 20:21:48 UTC (rev 30752)
@@ -0,0 +1,11 @@
+--- a/drivers/net/wireless/b43/main.c
++++ b/drivers/net/wireless/b43/main.c
+@@ -2699,6 +2699,8 @@ static int b43_gpio_init(struct b43_wlde
+ 		mask |= 0x0060;
+ 		set |= 0x0060;
+ 	}
++	if (dev->dev->chip_id == 0x5354)
++		set &= 0xff02;
+ 	if (0 /* FIXME: conditional unknown */ ) {
+ 		b43_write16(dev, B43_MMIO_GPIO_MASK,
+ 			    b43_read16(dev, B43_MMIO_GPIO_MASK)
