Index: openwrt/feeds/routing/olsrd/patches/003-dyn-gw-add-ping_cmd_param.patch
===================================================================
--- /dev/null
+++ openwrt/feeds/routing/olsrd/patches/003-dyn-gw-add-ping_cmd_param.patch
@@ -0,0 +1,153 @@
+From ee6d8c9ec0e5dd834d0d42ae07597148357e917b Mon Sep 17 00:00:00 2001
+From: Nico Geyso <nico.geyso@fu-berlin.de>
+Date: Sat, 20 Sep 2014 12:25:50 +0200
+Subject: [PATCH] dyn gw: add PingCmd parameter
+
+You now can configure the ping command with PingCmd. This is useful for instance
+if you do want to set an interface or execute an own script. See README_DYN_GW
+for an example.
+---
+ lib/dyn_gw/README_DYN_GW      |  5 ++++-
+ lib/dyn_gw/src/olsrd_dyn_gw.c | 42 ++++++++++++++++++++++++++++++++----------
+ lib/dyn_gw/src/olsrd_dyn_gw.h |  2 ++
+ 3 files changed, 38 insertions(+), 11 deletions(-)
+
+diff --git a/lib/dyn_gw/README_DYN_GW b/lib/dyn_gw/README_DYN_GW
+index 0aea1f9..ffc1c5c 100644
+--- a/lib/dyn_gw/README_DYN_GW
++++ b/lib/dyn_gw/README_DYN_GW
+@@ -83,10 +83,13 @@ LoadPlugin "olsrd_dyn_gw.so.0.5"
+     PlParam "Ping"   "192.168.100.10"
+     PlParam "Ping"   "192.168.101.10"
+     
+-    #   Third HNA group without ping check
++    # Third HNA group without ping check
+     PlParam "HNA"    "192.168.200.0 255.255.255.0"
+     PlParam "HNA"    "192.168.201.0 255.255.255.0"
+     PlParam "HNA"    "192.168.202.0 255.255.255.0"
++
++    # Set custom ping command - %s will be replaced with IP to ping
++    PlParam "PingCmd" "ping -c 1 -q -I vpn %s"
+ }
+ 
+ --------------------------------------------------------------------------------
+diff --git a/lib/dyn_gw/src/olsrd_dyn_gw.c b/lib/dyn_gw/src/olsrd_dyn_gw.c
+index 027863c..493a885 100644
+--- a/lib/dyn_gw/src/olsrd_dyn_gw.c
++++ b/lib/dyn_gw/src/olsrd_dyn_gw.c
+@@ -128,6 +128,8 @@ static bool check_gw(union olsr_ip_addr *, uint8_t, struct ping_list *);
+ 
+ static int ping_is_possible(struct ping_list *);
+ 
++static char ping_cmd[PING_CMD_MAX_LEN] = { DEFAULT_PING_CHECK_INTERVAL };
++
+ /* Event function to register with the scheduler */
+ static void olsr_event_doing_hna(void *);
+ 
+@@ -205,12 +207,29 @@ set_plugin_hna(const char *value, void *data __attribute__ ((unused)), set_plugi
+   return 0;
+ }
+ 
++static int
++set_plugin_cmd(const char *value, void *data __attribute__ ((unused)), set_plugin_parameter_addon addon __attribute__ ((unused)))
++{
++  size_t len = strlen(value);
++
++  if (len < PING_CMD_MAX_LEN) {
++    memcpy(ping_cmd, value, len);
++    OLSR_PRINTF(2, "Set ping command to: %s\n", ping_cmd);
++    return 0;
++  }
++
++  OLSR_PRINTF(0, "Ping command exceed max length: %d > %zu", PING_CMD_MAX_LEN, len);
++
++  return 1;
++}
++
+ static const struct olsrd_plugin_parameters plugin_parameters[] = {
+   {.name = "interval",      .set_plugin_parameter = &set_plugin_int,  .data = &ping_check_interval  },
+   {.name = "pinginterval",  .set_plugin_parameter = &set_plugin_int,  .data = &ping_check_interval  },
+   {.name = "checkinterval", .set_plugin_parameter = &set_plugin_int,  .data = &hna_check_interval   },
+   {.name = "ping",          .set_plugin_parameter = &set_plugin_ping, .data = NULL                  },
+   {.name = "hna",           .set_plugin_parameter = &set_plugin_hna,  .data = NULL                  },
++  {.name = "pingcmd",       .set_plugin_parameter = &set_plugin_cmd,  .data = &ping_cmd             },
+ };
+ 
+ void
+@@ -272,13 +291,13 @@ olsrd_plugin_init(void)
+       struct hna_list *lst;
+       struct ping_list *png;
+ 	    
+-      olsr_printf(1, "Group %d:\n", i);
++      olsr_printf(0, "Group %d:\n", i);
+       for (lst = grp->hna_list; lst; lst = lst->next) {
+         char addr[INET_ADDRSTRLEN];
+-        olsr_printf(1, "  HNA %s\n", get_ip_str(lst->hna_addr.v4.s_addr, addr, INET_ADDRSTRLEN));
++        olsr_printf(0, "  HNA %s\n", get_ip_str(lst->hna_addr.v4.s_addr, addr, INET_ADDRSTRLEN));
+       }
+       for (png = grp->ping_hosts; png; png = png->next) {
+-        olsr_printf(1, "  PING %s\n", png->ping_address);
++        olsr_printf(0, "  PING %s\n", png->ping_address);
+       }
+     }
+   }
+@@ -300,18 +319,21 @@ olsr_event_doing_hna(void *foo __attribute__ ((unused)))
+ 
+   update_routing();
+   
++  olsr_printf(0, "olsr_event_dooing_hna() got called\n");
+   for (grp = hna_groups; grp; grp = grp->next) {
+     for (li = grp->hna_list; li; li = li->next) {
+       if (!li->hna_added) {
+         if (grp->probe_ok && li->active) {
+-          olsr_printf(1, "Adding OLSR local HNA entry\n");
++          char addr[INET_ADDRSTRLEN];
++          olsr_printf(0, "  HNA %s\n", get_ip_str(li->hna_addr.v4.s_addr, addr, INET_ADDRSTRLEN));
++          olsr_printf(0, "Adding OLSR local HNA entry - new\n");
+           ip_prefix_list_add(&olsr_cnf->hna_entries, &li->hna_addr, li->hna_prefixlen);
+           li->hna_added = true;
+         }
+       } else {
+         if (!grp->probe_ok || !li->active) {
+           while (ip_prefix_list_remove(&olsr_cnf->hna_entries, &li->hna_addr, li->hna_prefixlen)) {
+-            olsr_printf(1, "Removing OLSR local HNA entry\n");
++            olsr_printf(0, "Removing OLSR local HNA entry\n");
+           }
+           li->hna_added = false;
+         }
+@@ -536,14 +558,14 @@ ping_is_possible(struct ping_list *the_ping_list)
+ {
+   struct ping_list *list;
+   for (list = the_ping_list; list; list = list->next) {
+-    char ping_command[50];
+-    snprintf(ping_command, sizeof(ping_command), "ping -c 1 -q %s", list->ping_address);
+-    olsr_printf(1, "\nDo ping on %s ...\n", list->ping_address);
++    char ping_command[96];
++    snprintf(ping_command, sizeof(ping_command), ping_cmd, list->ping_address);
++    olsr_printf(0, "\nDo ping on (%s) %s ...\n", ping_cmd, list->ping_address);
+     if (system(ping_command) == 0) {
+-      olsr_printf(1, "...OK\n\n");
++      olsr_printf(0, "...OK\n\n");
+       return 1;
+     }
+-    olsr_printf(1, "...FAILED\n\n");
++    olsr_printf(0, "...FAILED\n\n");
+   }
+   return 0;
+ }
+diff --git a/lib/dyn_gw/src/olsrd_dyn_gw.h b/lib/dyn_gw/src/olsrd_dyn_gw.h
+index 4db0838..bdca978 100644
+--- a/lib/dyn_gw/src/olsrd_dyn_gw.h
++++ b/lib/dyn_gw/src/olsrd_dyn_gw.h
+@@ -54,6 +54,8 @@
+ 
+ #define DEFAULT_HNA_CHECK_INTERVAL	1000
+ #define DEFAULT_PING_CHECK_INTERVAL	5
++#define DEFAULT_PING_CMD                "ping -c 1 -q %s"
++#define PING_CMD_MAX_LEN                64
+ 
+ int olsrd_plugin_init(void);
+ 
+-- 
+2.1.0
+
Index: openwrt/feeds/routing/olsrd/patches/series
===================================================================
--- openwrt.orig/feeds/routing/olsrd/patches/series
+++ openwrt/feeds/routing/olsrd/patches/series
@@ -1,2 +1,3 @@
 001-olsrd-json-ipv6-only.patch
 002-olsrd-txt-ipv6-only.patch
+003-dyn-gw-add-ping_cmd_param.patch
Index: openwrt/feeds/routing/olsrd/files/olsrd.init
===================================================================
--- openwrt.orig/feeds/routing/olsrd/files/olsrd.init
+++ openwrt/feeds/routing/olsrd/files/olsrd.init
@@ -38,7 +38,7 @@ validate_varname() {
 
 validate_olsrd_option() {
 	local str="$1"
-	[ -z "$str" -o "$str" != "${str%%[! 	0-9A-Za-z./|:_-]*}" ] && return 1
+	[ -z "$str" -o "$str" != "${str%%[! 	0-9A-Za-z.%/|:_-]*}" ] && return 1
 	return 0
 }
 
